@model Zeal_Institute.Models.Batch

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    List<Zeal_Institute.Models.ApplicationUser> dataId = (List<Zeal_Institute.Models.ApplicationUser>)ViewData["dataStudent"];
}

<p class="text-left">
    <a href="@Url.Action("Index", "Batches")" class="text-gray-700"><i class="fas fa-angle-left me-2"></i> Back to List</a>
</p>
<h4>Edit batch</h4>
<div class="card shadow-sm table-wrapper mb-3">
    <div class="card-body">
        
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="row">
                <div class="col-sm-6 col-md-6">
                    @Html.ValidationSummary(true, "", new { @class = "invalid-feedback" })
                    @Html.HiddenFor(model => model.Id, new { id = "idEdit" })
                    <div class="mb-4">
                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "" })
                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Code", autocomplete = "off", required = "" } })
                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "invalid-feedback" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter name", autocomplete = "off", required = "" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "invalid-feedback" })
                    </div>

                    <div class="mb-4">
                        @Html.LabelFor(model => model.CourseId, "Course", htmlAttributes: new { @class = "" })
                        @Html.DropDownList("CourseId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "invalid-feedback" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.ListStudent, "List student", htmlAttributes: new { @class = "" })
                        @Html.HiddenFor(model => model.ListStudent, new { id = "liststudentHidden" })
                        <select class="form-control" id="liststudent" multiple>
                            @foreach (var item in dataId)
                            {
                                <option value="@item.Id">@item.FullName - @item.RollNumber</option>
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.ListStudent, "", new { @class = "invalid-feedback" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.DateStart, htmlAttributes: new { @class = "" })
                        @Html.EditorFor(model => model.DateStart, new { htmlAttributes = new { @class = "form-control", @Value = @Model.DateStart.ToString("yyyy-MM-dd") } })
                        @Html.ValidationMessageFor(model => model.DateStart, "", new { @class = "invalid-feedback" })
                    </div>

                    <div class="mb-4">
                        @Html.LabelFor(model => model.DateEnd, htmlAttributes: new { @class = "" })
                        @Html.EditorFor(model => model.DateEnd, new { htmlAttributes = new { @class = "form-control", @Value = @Model.DateEnd.ToString("yyyy-MM-dd") } })
                        @Html.ValidationMessageFor(model => model.DateEnd, "", new { @class = "invalid-feedback" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "" })
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter description", autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "invalid-feedback" })
                    </div>
                </div>
                <div class="col-sm-12 col-md-12">
                    <div class="mt-3">
                        <button class="btn btn-sm mb-2 me-2 btn-outline-success" type="submit"><i class="far fa-save me-2"></i>Save</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/jquery-3.4.1.js"></script>
    <script src="~/Asset/Admin/vendor/select2/js/select2.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            var listStudent = [];
            $('#liststudent').select2({
                placeholder: "Student",
                closeOnSelect: false,
                ajax: {
                    url: "/Admin/Batches/GetListStudentSelect",
                    dataType: "json",
                    data: function (params) {
                        return {
                            searchTerm: params.term
                        };
                    },
                    processResults: function (data, params) {
                        return {
                            results: data
                        };
                    }
                }
            }).on('select2:select', function (e) {
                var data = e.params.data;
                listStudent.push(data.id);
                $('#liststudentHidden').val(listStudent);
            }).on('select2:unselect', function (e) {
                var data = e.params.data;
                listStudent = listStudent.filter(function (e) { return e != data.id });
                $('#liststudentHidden').val(listStudent);
            });
            
        });
        function getListId() {
            $.ajax({
                url: "/Admin/Batches/GetListIdStudent",
                dataType: "json",
                type: "GET",
                data: { id: $('#idEdit').val() },
                success: function (result, status, xhr) {
                    setTimeout(function () {
                        if (result && result.length > 0) {
                            $('#liststudentHidden').val(result);
                            $('#liststudent').val(result).trigger('change');
                        } else {
                            $('#liststudentHidden').val('');
                            $('#liststudent').val([]).trigger('change');
                        }
                    }, 200)
                }
            });
        };
        getListId();
    </script>
}

